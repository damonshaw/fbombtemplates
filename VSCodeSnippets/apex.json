{
	"System.Debug1": {
		"prefix": "debug input",
		"body": [
			"System.debug('*** ${1} = '+${1});"
		],
		"description": "a debug line"
	},
	"System.Debug2": {
		"prefix": "debug clipboard",
		"body": [
			"System.debug('*** ${CLIPBOARD} = '+${CLIPBOARD});"
		],
		"description": "a debug line"
	},	
	"Try Catch 1": {
		"prefix": "try input",
		"body": [
			"try{",
			"    ${1}",
			"}",
			"catch(Exception e){",
			"    System.debug('*** Exception = '+e.getLineNumber()+ ' - ' + e.getMessage());",
			"}"
		],
		"description": "a try catch statement"
	},
	"Try Catch 2": {
		"prefix": "try clipboard",
		"body": [
			"try{",
			"    ${CLIPBOARD}",
			"}",
			"catch(Exception e){",
			"    System.debug('*** Exception = '+e.getLineNumber()+ ' - ' + e.getMessage());",
			"}"
		],
		"description": "a try catch statement"
    },
	"Header 1": {
		"prefix": "header1",
		"body": [
			"/**",
			"* Description: ${1}",
			"* @author: Damon Shaw (Trineo)",
			"* @date: ${CURRENT_DATE} ${CURRENT_MONTH_NAME} ${CURRENT_YEAR}",
			"* @test: ${2}",
			"*/"
		],
		"description": "class header"
	},
	"Header 2": {
		"prefix": "header2",
		"body": [
			"/*------------------------------------------------------------",
			"Author:         Damon Shaw",
			"Company:        Trineo",
			"Description:    ${1}",
			"Test Class:     ${2}",
			"",
			"History",
			"${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR}      Damon Shaw    Created",
			"------------------------------------------------------------*/"
		],
		"description": "class header"
	},
	"String 1": {
		"prefix": "public string",
		"body": [
			"public String ${1} { get; set; }"
		],
		"description": "create a public string"
	},
	"String 2": {
		"prefix": "private string",
		"body": [
			"private String ${1} { get; set; }"
		],
		"description": "create a private string"
	},
	"Boolean 1": {
		"prefix": "public boolean",
		"body": [
			"public Boolean ${1} { get; set; }"
		],
		"description": "create a public boolean"
	},
	"Boolean 2": {
		"prefix": "private boolean",
		"body": [
			"private Boolean ${1} { get; set; }"
		],
		"description": "create a private boolean"
	},
	"Integer 1": {
		"prefix": "public integer",
		"body": [
			"public Integer ${1} { get; set; }"
		],
		"description": "create a public integer"
	},
	"Integer 2": {
		"prefix": "private integer",
		"body": [
			"private Integer ${1} { get; set; }"
		],
		"description": "create a private integer"
	},
	"Decimal 1": {
		"prefix": "public decimal",
		"body": [
			"public Decimal ${1} { get; set; }"
		],
		"description": "create a public decimal"
	},
	"Decimal 2": {
		"prefix": "private decimal",
		"body": [
			"private Decimal ${1} { get; set; }"
		],
		"description": "create a private decimal"
	},
	"Set 1": {
		"prefix": "public set",
		"body": [
			"public Set<${1}> ${2} { get; set; }"
		],
		"description": "create a public set"
	},
	"Set 2": {
		"prefix": "private set",
		"body": [
			"private Set<${1}> ${2} { get; set; }"
		],
		"description": "create a private set"
	},
	"List 1": {
		"prefix": "public list",
		"body": [
			"public List<${1}> ${2} { get; set; }"
		],
		"description": "create a public list"
	},
	"List 2": {
		"prefix": "private list",
		"body": [
			"private List<${1}> ${2} { get; set; }"
		],
		"description": "create a private list"
	},
	"Map 1": {
		"prefix": "public map",
		"body": [
			"public Map<${1}, ${2}> ${3} { get; set; }"
		],
		"description": "create a public map"
	},
	"Map 2": {
		"prefix": "private map",
		"body": [
			"private Map<${1}, ${2}> ${3} { get; set; }"
		],
		"description": "create a private map"
	},
	"Page Params 1": {
		"prefix": "params 1",
		"body": [
			"System.currentPageReference().getParameters().get('${1}')"
		],
		"description": "get page parameter"
	},
	"Picklist 1": {
		"prefix": "picklist options 1",
		"body": [
			"public List<SelectOption> get${1}(){",
			"    List<SelectOption> options = new List<SelectOption>();",
			"    ",
			"    for(${2}){",
			"        options.add(new SelectOption(${3},${4}));",
			"    }",
			"    return options; ",
			"}"
		],
		"description": "create a select option getter"
	},
	"get set 1": {
		"prefix": "get set",
		"body": [
			"{ get; set; }"
		],
		"description": "{ get; set; }"
	},
	"get 1": {
		"prefix": "getter",
		"body": [
			"public ${1} ${2} {",
			"    get{",
			"        if(${2} == null){",
			"            ${2} = ${3};",
			"        }",
			"        return ${2};",
			"    }set;",
			"}"
		],
		"description": "public var { get{} set; }"
	},
	"this.var": {
		"prefix": "this",
		"body": [
			"this.${CLIPBOARD} = "
		],
		"description": "this.variable = "
	},
	"database.insert 1": {
		"prefix": "database.insert input List",
		"body": [
			"Database.SaveResult[] srList = Database.insert(${1}, ${2:Boolean});",
			"for(Database.SaveResult sr : srList) {",
			"    if(sr.isSuccess()) {",
			"        ",
			"    }",
			"    else {",
			"        for(Database.Error err : sr.getErrors()) {",
			"            ",
			"        }",
			"    }",
			"}"
		],
		"description": "database.insert"
	},
	"database.insert 2": {
		"prefix": "database.insert clipboard List",
		"body": [
			"Database.SaveResult[] srList = Database.insert(${CLIPBOARD}, ${1:Boolean});",
			"for(Database.SaveResult sr : srList) {",
			"    if(sr.isSuccess()) {",
			"        ",
			"    }",
			"    else {",
			"        for(Database.Error err : sr.getErrors()) {",
			"            ",
			"        }",
			"    }",
			"}"
		],
		"description": "database.insert"
	},
	"database.insert 3": {
		"prefix": "database.insert input Single",
		"body": [
			"Database.SaveResult sr = Database.insert(${1}, ${2:Boolean});",
			"if(sr.isSuccess()) {",
			"    ",
			"}",
			"else {",
			"    for(Database.Error err : sr.getErrors()) {",
			"        ",
			"    }",
			"}"
		],
		"description": "database.insert"
	},
	"database.insert 4": {
		"prefix": "database.insert clipboard Single",
		"body": [
			"Database.SaveResult sr = Database.insert(${CLIPBOARD}, ${1:Boolean});",
			"if(sr.isSuccess()) {",
			"    ",
			"}",
			"else {",
			"    for(Database.Error err : sr.getErrors()) {",
			"        ",
			"    }",
			"}"
		],
		"description": "database.insert"
	},
	"Select 1": {
		"prefix": "[SELECT",
		"body": [
			"[SELECT Id FROM ${1} WHERE ${2}"
		],
		"description": "basic SOQL select statement"
	}
}